
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : tp2
//  @ File Name : 
//  @ Date : 2014-06-06
//  @ Author : Guehel Bouanga
//
//

package tp2.reseau.model;


import java.io.File;
import java.io.IOException;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;






/** Object representant la machine locale
 * Il herite de Machine 
**
 * @author Guehel
 *
 */
public class MachineLocale extends Machine implements Observateur, Observable{
	/** 
	 * Liste des machines du meme reseau identifie par leur adresse IP*/
	private Map < String, Machine > voisins;
	/** Action a executer par la machine locale*/
	private Executor executeur = Executors.newFixedThreadPool(3);
	/**adresse locale sous forme de bite */
	private byte [] addresseLocaleTab;
	private String adresseLocale;
	private ArrayList<Observateur> observateurs;
	private Machine machineTrouve = null;


	/**
	 * contructeur pour construire un Machine locale 
	 * cree un objet de type Machine et lance la decouverte des machines voisines
	 * @param localHost Object InetAdresse representant la machine local
	 * @throws UnknownHostException 
	 */
	public MachineLocale() throws UnknownHostException {

		super(InetAddress.getLocalHost());
		voisins = new HashMap<>(255);
		adresseLocale=Inet4Address.getLoopbackAddress().toString();
		addresseLocaleTab = InetAddress.getLocalHost().getAddress();
		observateurs = new ArrayList<Observateur>();


	}


	/**Mehode servant a rechercher les machines voisines 
	 * elle lance le service de decouverte de reseau . 
	 * la mise a jour de la liste des voisins est effectue par feed back a travers le pattern observateur
	 * 
	 */
	public void decouvrirVoisins(){
		
		executeur.execute(new DecouverteReseau(this,addresseLocaleTab ));
		
	}

	
	public void demarrerServeur(int nPort){
		ServerSocket socket = null;
		
		try{
			socket = new ServerSocket(nPort);
			executeur.execute(new ReceptionFichier(socket, this));
		}catch(IOException e){}
	}

	/**Cree le thread d'envoie de fichier avec les parametre
	 * @param IPMachineCliente
	 * @param file
	 */
	public void envoyerFichier(File file) {

		if(machineTrouve!=null){
			String IPMachineCliente = machineTrouve.getAdresseIp() ;
					try {
						Runnable envoie = new EnvoieFichier(IPMachineCliente, file, this);
						executeur.execute(envoie);
						
					} 
					
					catch(java.net.ConnectException e) {
					
						System.out.println("le serveur distant est innacessible");
						notify("le serveur distant est innacessible");
					}
					catch (IOException
							| RuntimeException e) {
						notify("la connection a echoué");
					e.printStackTrace();
					}
			
			}
		

	}

	public void rechercherVoisin(String ipVoisin){
		machineTrouve = voisins.get(ipVoisin);
		if(machineTrouve!=null)
			notify(machineTrouve);
		else notify("La machine recherche n'existe pas ou n'est pas connectée");
	}

	public String getAdresseLocale() {
		return adresseLocale;
	}





	/** Met a jour la liste des machines actives dans le reseau*/
	@Override
	public synchronized void update(Machine machine) {
		System.out.println(machine.getNomComplet());
		if(machine.estActive())
			voisins.put(machine.getAdresseIp(), machine);
		else 
			voisins.remove(machine.getAdresseIp());
		notify(voisins);

	}
	
	
	/**Informe ses observeur de la reussite des services */
	public void update(boolean reussiteService) {
		notify(reussiteService);
	}

	@Override
	public void update(String machine) {
		this.notify(machine);
		
	}

	@Override
	public void update(Map<String, Machine> voisins) {
	
		
	}





	@Override
	public void setObservateur(Observateur observateur) {
		observateurs.add(observateur);
		notify(this);
		
	}





	@Override
	public void notify(Machine machine) {
		for(Observateur observateur: observateurs){
			observateur.update(machine);
		}
	}





	@Override
	public void notify(boolean reussie) {
		for(Observateur observateur: observateurs){
			observateur.update(reussie);
		}
	}





	@Override
	public void notify(Map<String, Machine> machines) {
		for(Observateur observateur: observateurs){
			observateur.update(machines);
		}
		
	}





	@Override
	public void notify(String machine) {
		for(Observateur observateur: observateurs){
			observateur.update(machine);
		}
		
	}
}

/*
 */